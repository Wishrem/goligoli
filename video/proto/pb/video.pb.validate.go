// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Liked

	// no validation rules for Shared

	// no validation rules for VideoId

	// no validation rules for VideoUrl

	// no validation rules for Passed

	// no validation rules for Reason

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on UploadReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadReqMultiError, or nil
// if none found.
func (m *UploadReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Video

	// no validation rules for Title

	// no validation rules for Description

	if len(errors) > 0 {
		return UploadReqMultiError(errors)
	}

	return nil
}

// UploadReqMultiError is an error wrapping multiple validation errors returned
// by UploadReq.ValidateAll() if the designated constraints aren't met.
type UploadReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadReqMultiError) AllErrors() []error { return m }

// UploadReqValidationError is the validation error returned by
// UploadReq.Validate if the designated constraints aren't met.
type UploadReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadReqValidationError) ErrorName() string { return "UploadReqValidationError" }

// Error satisfies the builtin error interface
func (e UploadReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadReqValidationError{}

// Validate checks the field values on UploadResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadRespMultiError, or
// nil if none found.
func (m *UploadResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadRespValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadRespValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadRespValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadRespMultiError(errors)
	}

	return nil
}

// UploadRespMultiError is an error wrapping multiple validation errors
// returned by UploadResp.ValidateAll() if the designated constraints aren't met.
type UploadRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRespMultiError) AllErrors() []error { return m }

// UploadRespValidationError is the validation error returned by
// UploadResp.Validate if the designated constraints aren't met.
type UploadRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRespValidationError) ErrorName() string { return "UploadRespValidationError" }

// Error satisfies the builtin error interface
func (e UploadRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRespValidationError{}

// Validate checks the field values on LikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LikeReqMultiError, or nil if none found.
func (m *LikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for VideoId

	if len(errors) > 0 {
		return LikeReqMultiError(errors)
	}

	return nil
}

// LikeReqMultiError is an error wrapping multiple validation errors returned
// by LikeReq.ValidateAll() if the designated constraints aren't met.
type LikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeReqMultiError) AllErrors() []error { return m }

// LikeReqValidationError is the validation error returned by LikeReq.Validate
// if the designated constraints aren't met.
type LikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeReqValidationError) ErrorName() string { return "LikeReqValidationError" }

// Error satisfies the builtin error interface
func (e LikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeReqValidationError{}

// Validate checks the field values on LikeResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikeRespMultiError, or nil
// if none found.
func (m *LikeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LikeRespMultiError(errors)
	}

	return nil
}

// LikeRespMultiError is an error wrapping multiple validation errors returned
// by LikeResp.ValidateAll() if the designated constraints aren't met.
type LikeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeRespMultiError) AllErrors() []error { return m }

// LikeRespValidationError is the validation error returned by
// LikeResp.Validate if the designated constraints aren't met.
type LikeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeRespValidationError) ErrorName() string { return "LikeRespValidationError" }

// Error satisfies the builtin error interface
func (e LikeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeRespValidationError{}

// Validate checks the field values on ShareReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareReqMultiError, or nil
// if none found.
func (m *ShareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for VideoId

	if len(errors) > 0 {
		return ShareReqMultiError(errors)
	}

	return nil
}

// ShareReqMultiError is an error wrapping multiple validation errors returned
// by ShareReq.ValidateAll() if the designated constraints aren't met.
type ShareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareReqMultiError) AllErrors() []error { return m }

// ShareReqValidationError is the validation error returned by
// ShareReq.Validate if the designated constraints aren't met.
type ShareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareReqValidationError) ErrorName() string { return "ShareReqValidationError" }

// Error satisfies the builtin error interface
func (e ShareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareReqValidationError{}

// Validate checks the field values on ShareResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShareResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShareRespMultiError, or nil
// if none found.
func (m *ShareResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShareUrl

	if len(errors) > 0 {
		return ShareRespMultiError(errors)
	}

	return nil
}

// ShareRespMultiError is an error wrapping multiple validation errors returned
// by ShareResp.ValidateAll() if the designated constraints aren't met.
type ShareRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareRespMultiError) AllErrors() []error { return m }

// ShareRespValidationError is the validation error returned by
// ShareResp.Validate if the designated constraints aren't met.
type ShareRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareRespValidationError) ErrorName() string { return "ShareRespValidationError" }

// Error satisfies the builtin error interface
func (e ShareRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareRespValidationError{}

// Validate checks the field values on JudgeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JudgeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JudgeReqMultiError, or nil
// if none found.
func (m *JudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminId

	// no validation rules for VideoId

	// no validation rules for Passed

	// no validation rules for Reason

	if len(errors) > 0 {
		return JudgeReqMultiError(errors)
	}

	return nil
}

// JudgeReqMultiError is an error wrapping multiple validation errors returned
// by JudgeReq.ValidateAll() if the designated constraints aren't met.
type JudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JudgeReqMultiError) AllErrors() []error { return m }

// JudgeReqValidationError is the validation error returned by
// JudgeReq.Validate if the designated constraints aren't met.
type JudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JudgeReqValidationError) ErrorName() string { return "JudgeReqValidationError" }

// Error satisfies the builtin error interface
func (e JudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JudgeReqValidationError{}

// Validate checks the field values on JudgeResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JudgeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JudgeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JudgeRespMultiError, or nil
// if none found.
func (m *JudgeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *JudgeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JudgeRespValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JudgeRespValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JudgeRespValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JudgeRespMultiError(errors)
	}

	return nil
}

// JudgeRespMultiError is an error wrapping multiple validation errors returned
// by JudgeResp.ValidateAll() if the designated constraints aren't met.
type JudgeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JudgeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JudgeRespMultiError) AllErrors() []error { return m }

// JudgeRespValidationError is the validation error returned by
// JudgeResp.Validate if the designated constraints aren't met.
type JudgeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JudgeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JudgeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JudgeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JudgeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JudgeRespValidationError) ErrorName() string { return "JudgeRespValidationError" }

// Error satisfies the builtin error interface
func (e JudgeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJudgeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JudgeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JudgeRespValidationError{}

// Validate checks the field values on ViewReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ViewReqMultiError, or nil if none found.
func (m *ViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filename

	if len(errors) > 0 {
		return ViewReqMultiError(errors)
	}

	return nil
}

// ViewReqMultiError is an error wrapping multiple validation errors returned
// by ViewReq.ValidateAll() if the designated constraints aren't met.
type ViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewReqMultiError) AllErrors() []error { return m }

// ViewReqValidationError is the validation error returned by ViewReq.Validate
// if the designated constraints aren't met.
type ViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewReqValidationError) ErrorName() string { return "ViewReqValidationError" }

// Error satisfies the builtin error interface
func (e ViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewReqValidationError{}

// Validate checks the field values on ViewResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ViewRespMultiError, or nil
// if none found.
func (m *ViewResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ViewRespMultiError(errors)
	}

	return nil
}

// ViewRespMultiError is an error wrapping multiple validation errors returned
// by ViewResp.ValidateAll() if the designated constraints aren't met.
type ViewRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewRespMultiError) AllErrors() []error { return m }

// ViewRespValidationError is the validation error returned by
// ViewResp.Validate if the designated constraints aren't met.
type ViewRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewRespValidationError) ErrorName() string { return "ViewRespValidationError" }

// Error satisfies the builtin error interface
func (e ViewRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewRespValidationError{}
