// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comment.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resp with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Resp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RespMultiError, or nil if none found.
func (m *Resp) ValidateAll() error {
	return m.validate(true)
}

func (m *Resp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Content

	// no validation rules for SentAt

	if len(errors) > 0 {
		return RespMultiError(errors)
	}

	return nil
}

// RespMultiError is an error wrapping multiple validation errors returned by
// Resp.ValidateAll() if the designated constraints aren't met.
type RespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RespMultiError) AllErrors() []error { return m }

// RespValidationError is the validation error returned by Resp.Validate if the
// designated constraints aren't met.
type RespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RespValidationError) ErrorName() string { return "RespValidationError" }

// Error satisfies the builtin error interface
func (e RespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RespValidationError{}

// Validate checks the field values on CommentReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentReqMultiError, or
// nil if none found.
func (m *CommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for VideoId

	// no validation rules for Content

	// no validation rules for SentAt

	if len(errors) > 0 {
		return CommentReqMultiError(errors)
	}

	return nil
}

// CommentReqMultiError is an error wrapping multiple validation errors
// returned by CommentReq.ValidateAll() if the designated constraints aren't met.
type CommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentReqMultiError) AllErrors() []error { return m }

// CommentReqValidationError is the validation error returned by
// CommentReq.Validate if the designated constraints aren't met.
type CommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentReqValidationError) ErrorName() string { return "CommentReqValidationError" }

// Error satisfies the builtin error interface
func (e CommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentReqValidationError{}

// Validate checks the field values on CommentResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentRespMultiError, or
// nil if none found.
func (m *CommentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentRespValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentRespValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentRespValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentRespMultiError(errors)
	}

	return nil
}

// CommentRespMultiError is an error wrapping multiple validation errors
// returned by CommentResp.ValidateAll() if the designated constraints aren't met.
type CommentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentRespMultiError) AllErrors() []error { return m }

// CommentRespValidationError is the validation error returned by
// CommentResp.Validate if the designated constraints aren't met.
type CommentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentRespValidationError) ErrorName() string { return "CommentRespValidationError" }

// Error satisfies the builtin error interface
func (e CommentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentRespValidationError{}

// Validate checks the field values on ResponseReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseReqMultiError, or
// nil if none found.
func (m *ResponseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CommentId

	// no validation rules for Content

	// no validation rules for SentAt

	if len(errors) > 0 {
		return ResponseReqMultiError(errors)
	}

	return nil
}

// ResponseReqMultiError is an error wrapping multiple validation errors
// returned by ResponseReq.ValidateAll() if the designated constraints aren't met.
type ResponseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseReqMultiError) AllErrors() []error { return m }

// ResponseReqValidationError is the validation error returned by
// ResponseReq.Validate if the designated constraints aren't met.
type ResponseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseReqValidationError) ErrorName() string { return "ResponseReqValidationError" }

// Error satisfies the builtin error interface
func (e ResponseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseReqValidationError{}

// Validate checks the field values on ResponseResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResponseResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseRespMultiError, or
// nil if none found.
func (m *ResponseResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseRespValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseRespValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseRespValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CommentId

	if len(errors) > 0 {
		return ResponseRespMultiError(errors)
	}

	return nil
}

// ResponseRespMultiError is an error wrapping multiple validation errors
// returned by ResponseResp.ValidateAll() if the designated constraints aren't met.
type ResponseRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseRespMultiError) AllErrors() []error { return m }

// ResponseRespValidationError is the validation error returned by
// ResponseResp.Validate if the designated constraints aren't met.
type ResponseRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseRespValidationError) ErrorName() string { return "ResponseRespValidationError" }

// Error satisfies the builtin error interface
func (e ResponseRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseRespValidationError{}

// Validate checks the field values on GetCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCommentReqMultiError, or
// nil if none found.
func (m *GetCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return GetCommentReqMultiError(errors)
	}

	return nil
}

// GetCommentReqMultiError is an error wrapping multiple validation errors
// returned by GetCommentReq.ValidateAll() if the designated constraints
// aren't met.
type GetCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentReqMultiError) AllErrors() []error { return m }

// GetCommentReqValidationError is the validation error returned by
// GetCommentReq.Validate if the designated constraints aren't met.
type GetCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentReqValidationError) ErrorName() string { return "GetCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentReqValidationError{}

// Validate checks the field values on GetCommentResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCommentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCommentRespMultiError,
// or nil if none found.
func (m *GetCommentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentRespValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentRespValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentRespValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResponds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentRespValidationError{
						field:  fmt.Sprintf("Responds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentRespValidationError{
						field:  fmt.Sprintf("Responds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentRespValidationError{
					field:  fmt.Sprintf("Responds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentRespMultiError(errors)
	}

	return nil
}

// GetCommentRespMultiError is an error wrapping multiple validation errors
// returned by GetCommentResp.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRespMultiError) AllErrors() []error { return m }

// GetCommentRespValidationError is the validation error returned by
// GetCommentResp.Validate if the designated constraints aren't met.
type GetCommentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRespValidationError) ErrorName() string { return "GetCommentRespValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRespValidationError{}
